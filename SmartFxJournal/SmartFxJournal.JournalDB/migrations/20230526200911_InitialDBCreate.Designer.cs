// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SmartFxJournal.JournalDB.model;

#nullable disable

namespace SmartFxJournal.JournalDB.migrations
{
    [DbContext(typeof(JournalDbContext))]
    [Migration("20230526200911_InitialDBCreate")]
    partial class InitialDBCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SmartFxJournal.JournalDB.model.CTraderAccount", b =>
                {
                    b.Property<string>("CTraderId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("c_trader_id");

                    b.Property<string>("AccessToken")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("access_token");

                    b.Property<string>("AuthToken")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("auth_token");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("client_id");

                    b.Property<string>("ClientSecret")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("client_secret");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("ExpiresOn")
                        .HasColumnType("bigint")
                        .HasColumnName("expires_on");

                    b.Property<long?>("LastFetchedOn")
                        .HasColumnType("bigint")
                        .HasColumnName("last_fetched_on");

                    b.Property<DateTime>("LastModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified_on")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("refresh_token");

                    b.HasKey("CTraderId")
                        .HasName("pk_ctraderaccounts");

                    b.HasIndex("ClientId")
                        .IsUnique()
                        .HasDatabaseName("ix_ctraderaccounts_client_id");

                    b.ToTable("ctraderaccounts", (string)null);
                });

            modelBuilder.Entity("SmartFxJournal.JournalDB.model.FxAccount", b =>
                {
                    b.Property<long>("AccountNo")
                        .HasColumnType("bigint")
                        .HasColumnName("account_no");

                    b.Property<string>("AccountCurrency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(10)")
                        .HasColumnName("account_currency")
                        .HasDefaultValueSql("'EUR'::character varying");

                    b.Property<string>("Broker")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("broker");

                    b.Property<long?>("CTraderAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("c_trader_account_id");

                    b.Property<string>("CTraderId")
                        .HasColumnType("character varying(256)")
                        .HasColumnName("c_trader_id");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("now()");

                    b.Property<decimal>("CurrentBalance")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("current_balance");

                    b.Property<short>("ImportMode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("import_mode")
                        .HasDefaultValueSql("0");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.Property<bool>("IsLive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_live");

                    b.Property<long>("LastImportedOn")
                        .HasColumnType("bigint")
                        .HasColumnName("last_imported_on");

                    b.Property<DateTime>("LastModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified_on")
                        .HasDefaultValueSql("now()");

                    b.Property<DateOnly>("OpenedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("opened_on")
                        .HasDefaultValueSql("now()");

                    b.Property<decimal>("StartBalance")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("start_balance");

                    b.HasKey("AccountNo")
                        .HasName("pk_accounts");

                    b.HasIndex("CTraderId")
                        .HasDatabaseName("ix_accounts_c_trader_id");

                    b.ToTable("accounts", null, t =>
                        {
                            t.HasCheckConstraint("chk_positive", "account_no > 0");
                        });
                });

            modelBuilder.Entity("SmartFxJournal.JournalDB.model.FxHistoricalTrade", b =>
                {
                    b.Property<long>("DealId")
                        .HasColumnType("bigint")
                        .HasColumnName("deal_id");

                    b.Property<long>("AccountNo")
                        .HasColumnType("bigint")
                        .HasColumnName("account_no");

                    b.Property<decimal>("BalanceAfterClose")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("balance_after_close");

                    b.Property<long>("ClosedVolume")
                        .HasColumnType("bigint")
                        .HasColumnName("closed_volume");

                    b.Property<string>("Comment")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("comment");

                    b.Property<decimal>("Commission")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("commission");

                    b.Property<int>("DealStatus")
                        .HasColumnType("integer")
                        .HasColumnName("deal_status");

                    b.Property<int>("Direction")
                        .HasColumnType("integer")
                        .HasColumnName("direction");

                    b.Property<decimal>("ExecutionPrice")
                        .HasColumnType("decimal(10,5)")
                        .HasColumnName("execution_price");

                    b.Property<long>("FilledVolume")
                        .HasColumnType("bigint")
                        .HasColumnName("filled_volume");

                    b.Property<decimal>("GrossProfit")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("gross_profit");

                    b.Property<bool>("IsClosing")
                        .HasColumnType("boolean")
                        .HasColumnName("is_closing");

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("label");

                    b.Property<DateTimeOffset?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_at");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("order_id");

                    b.Property<DateTimeOffset?>("OrderOpenedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("order_opened_at");

                    b.Property<long>("PositionId")
                        .HasColumnType("bigint")
                        .HasColumnName("position_id");

                    b.Property<decimal>("Swap")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("swap");

                    b.Property<short>("Symbol")
                        .HasColumnType("smallint")
                        .HasColumnName("symbol");

                    b.Property<long>("Volume")
                        .HasColumnType("bigint")
                        .HasColumnName("volume");

                    b.HasKey("DealId")
                        .HasName("pk_historytrades");

                    b.HasIndex("AccountNo")
                        .HasDatabaseName("ix_historytrades_account_no");

                    b.ToTable("historytrades", (string)null);
                });

            modelBuilder.Entity("SmartFxJournal.JournalDB.model.FxPosition", b =>
                {
                    b.Property<long>("PositionId")
                        .HasColumnType("bigint")
                        .HasColumnName("position_id");

                    b.Property<long>("AccountNo")
                        .HasColumnType("bigint")
                        .HasColumnName("account_no");

                    b.Property<string>("Comment")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("comment");

                    b.Property<decimal>("Commission")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("commission");

                    b.Property<int>("Direction")
                        .HasColumnType("integer")
                        .HasColumnName("direction");

                    b.Property<decimal>("ExecutionPrice")
                        .HasColumnType("decimal(10,5)")
                        .HasColumnName("execution_price");

                    b.Property<decimal>("GrossProfit")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("gross_profit");

                    b.Property<bool?>("IsGuaranteedSL")
                        .HasColumnType("boolean")
                        .HasColumnName("is_guaranteed_sl");

                    b.Property<bool>("IsTrailingStopLoss")
                        .HasColumnType("boolean")
                        .HasColumnName("is_trailing_stop_loss");

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("label");

                    b.Property<DateTimeOffset?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_at");

                    b.Property<DateTimeOffset?>("OrderOpenedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("order_opened_at");

                    b.Property<short>("PositionStatus")
                        .HasColumnType("smallint")
                        .HasColumnName("position_status");

                    b.Property<decimal?>("StopLoss")
                        .HasColumnType("decimal(10,5)")
                        .HasColumnName("stop_loss");

                    b.Property<decimal>("Swap")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("swap");

                    b.Property<short>("Symbol")
                        .HasColumnType("smallint")
                        .HasColumnName("symbol");

                    b.Property<decimal?>("TakeProfit")
                        .HasColumnType("decimal(10,5)")
                        .HasColumnName("take_profit");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("tax");

                    b.Property<decimal>("UsedMargin")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("used_margin");

                    b.Property<long>("Volume")
                        .HasColumnType("bigint")
                        .HasColumnName("volume");

                    b.HasKey("PositionId")
                        .HasName("pk_fxpositions");

                    b.HasIndex("AccountNo")
                        .HasDatabaseName("ix_fxpositions_account_no");

                    b.ToTable("fxpositions", (string)null);
                });

            modelBuilder.Entity("SmartFxJournal.JournalDB.model.FxAccount", b =>
                {
                    b.HasOne("SmartFxJournal.JournalDB.model.CTraderAccount", "Parent")
                        .WithMany("FxAccounts")
                        .HasForeignKey("CTraderId")
                        .HasConstraintName("fk_accounts_ctraderaccounts_parent_c_trader_id");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("SmartFxJournal.JournalDB.model.FxHistoricalTrade", b =>
                {
                    b.HasOne("SmartFxJournal.JournalDB.model.FxAccount", "Owner")
                        .WithMany("OrderHistory")
                        .HasForeignKey("AccountNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_historytrades_accounts_owner_account_no");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("SmartFxJournal.JournalDB.model.FxPosition", b =>
                {
                    b.HasOne("SmartFxJournal.JournalDB.model.FxAccount", "Owner")
                        .WithMany("Positions")
                        .HasForeignKey("AccountNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_fxpositions_accounts_owner_account_no");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("SmartFxJournal.JournalDB.model.CTraderAccount", b =>
                {
                    b.Navigation("FxAccounts");
                });

            modelBuilder.Entity("SmartFxJournal.JournalDB.model.FxAccount", b =>
                {
                    b.Navigation("OrderHistory");

                    b.Navigation("Positions");
                });
#pragma warning restore 612, 618
        }
    }
}
