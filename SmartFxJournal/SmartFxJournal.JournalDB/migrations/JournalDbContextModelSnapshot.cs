// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SmartFxJournal.JournalDB.model;

#nullable disable

namespace SmartFxJournal.JournalDB.Migrations
{
    [DbContext(typeof(JournalDbContext))]
    partial class JournalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SmartFxJournal.JournalDB.model.AnalysisJournalEntry", b =>
                {
                    b.Property<long>("JournalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("journal_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("JournalId"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_complete");

                    b.Property<string>("JournalText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("journal_text");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.HasKey("JournalId")
                        .HasName("pk_journals_for_analysis");

                    b.HasIndex("ParentId")
                        .IsUnique()
                        .HasDatabaseName("ix_journals_for_analysis_parent_id");

                    b.ToTable("journals_for_analysis", (string)null);
                });

            modelBuilder.Entity("SmartFxJournal.JournalDB.model.CTraderAccount", b =>
                {
                    b.Property<string>("CTraderId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("c_trader_id");

                    b.Property<string>("AccessToken")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("access_token");

                    b.Property<string>("AuthToken")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("auth_token");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("client_id");

                    b.Property<string>("ClientSecret")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("client_secret");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("ExpiresOn")
                        .HasColumnType("bigint")
                        .HasColumnName("expires_on");

                    b.Property<long?>("LastFetchedOn")
                        .HasColumnType("bigint")
                        .HasColumnName("last_fetched_on");

                    b.Property<DateTime>("LastModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified_on")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("refresh_token");

                    b.HasKey("CTraderId")
                        .HasName("pk_ctrader_master");

                    b.HasIndex("ClientId")
                        .IsUnique()
                        .HasDatabaseName("ix_ctrader_master_client_id");

                    b.ToTable("ctrader_master", (string)null);
                });

            modelBuilder.Entity("SmartFxJournal.JournalDB.model.ClosedPosition", b =>
                {
                    b.Property<long>("PositionId")
                        .HasColumnType("bigint")
                        .HasColumnName("position_id");

                    b.Property<long>("AccountNo")
                        .HasColumnType("bigint")
                        .HasColumnName("account_no");

                    b.Property<short>("AnalysisStatus")
                        .HasColumnType("smallint")
                        .HasColumnName("analysis_status");

                    b.Property<decimal>("BalanceAfter")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("balance_after");

                    b.Property<decimal>("Commission")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("commission");

                    b.Property<int>("Direction")
                        .HasColumnType("integer")
                        .HasColumnName("direction");

                    b.Property<decimal>("EntryPrice")
                        .HasColumnType("decimal(10,5)")
                        .HasColumnName("entry_price");

                    b.Property<decimal>("ExitPrice")
                        .HasColumnType("decimal(10,5)")
                        .HasColumnName("exit_price");

                    b.Property<decimal>("GrossProfit")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("gross_profit");

                    b.Property<bool>("IsMultiOrderPosition")
                        .HasColumnType("boolean")
                        .HasColumnName("is_multi_order_position");

                    b.Property<DateTimeOffset>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_at");

                    b.Property<decimal>("NetProfit")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("net_profit");

                    b.Property<DateTimeOffset>("OrderClosedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("order_closed_at");

                    b.Property<DateTimeOffset>("OrderOpenedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("order_opened_at");

                    b.Property<short>("PositionStatus")
                        .HasColumnType("smallint")
                        .HasColumnName("position_status");

                    b.Property<decimal>("Swap")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("swap");

                    b.Property<short>("Symbol")
                        .HasColumnType("smallint")
                        .HasColumnName("symbol");

                    b.Property<long>("Volume")
                        .HasColumnType("bigint")
                        .HasColumnName("volume");

                    b.HasKey("PositionId")
                        .HasName("pk_traded_positions");

                    b.HasIndex("AccountNo")
                        .HasDatabaseName("ix_traded_positions_account_no");

                    b.ToTable("traded_positions", (string)null);
                });

            modelBuilder.Entity("SmartFxJournal.JournalDB.model.ExecutedOrder", b =>
                {
                    b.Property<long>("DealId")
                        .HasColumnType("bigint")
                        .HasColumnName("deal_id");

                    b.Property<long>("AccountNo")
                        .HasColumnType("bigint")
                        .HasColumnName("account_no");

                    b.Property<decimal>("BalanceAfter")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("balance_after");

                    b.Property<long>("ClosedVolume")
                        .HasColumnType("bigint")
                        .HasColumnName("closed_volume");

                    b.Property<decimal>("Commission")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("commission");

                    b.Property<short>("DealStatus")
                        .HasColumnType("smallint")
                        .HasColumnName("deal_status");

                    b.Property<int>("Direction")
                        .HasColumnType("integer")
                        .HasColumnName("direction");

                    b.Property<decimal>("ExecutionPrice")
                        .HasColumnType("decimal(10,5)")
                        .HasColumnName("execution_price");

                    b.Property<long>("FilledVolume")
                        .HasColumnType("bigint")
                        .HasColumnName("filled_volume");

                    b.Property<decimal>("GrossProfit")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("gross_profit");

                    b.Property<bool>("IsClosing")
                        .HasColumnType("boolean")
                        .HasColumnName("is_closing");

                    b.Property<DateTimeOffset>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_at");

                    b.Property<DateTimeOffset>("OrderExecutedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("order_executed_at");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("order_id");

                    b.Property<long>("PositionId")
                        .HasColumnType("bigint")
                        .HasColumnName("position_id");

                    b.Property<decimal>("Swap")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("swap");

                    b.Property<short>("Symbol")
                        .HasColumnType("smallint")
                        .HasColumnName("symbol");

                    b.HasKey("DealId")
                        .HasName("pk_executed_orders");

                    b.HasAlternateKey("OrderId")
                        .HasName("ak_executed_orders_order_id");

                    b.HasIndex("AccountNo")
                        .HasDatabaseName("ix_executed_orders_account_no");

                    b.HasIndex("PositionId")
                        .HasDatabaseName("ix_executed_orders_position_id");

                    b.ToTable("executed_orders", (string)null);
                });

            modelBuilder.Entity("SmartFxJournal.JournalDB.model.PositionAnalysisEntry", b =>
                {
                    b.Property<long>("EntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("entry_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("EntryId"));

                    b.Property<string>("AnalysisScenario")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasColumnName("analysis_scenario");

                    b.Property<string>("AnalyzedAspect")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasColumnName("analyzed_aspect");

                    b.Property<bool>("BettterAvoided")
                        .HasColumnType("boolean")
                        .HasColumnName("bettter_avoided");

                    b.Property<List<string>>("ExecutionAccuracy")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("execution_accuracy");

                    b.Property<decimal>("ExecutionPrice")
                        .HasColumnType("decimal(10,5)")
                        .HasColumnName("execution_price");

                    b.Property<DateTimeOffset>("ExecutionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("execution_time");

                    b.Property<List<string>>("IndicatorStatus")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("indicator_status");

                    b.Property<long>("PositionId")
                        .HasColumnType("bigint")
                        .HasColumnName("position_id");

                    b.Property<decimal>("ProfitInPercent")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("profit_in_percent");

                    b.Property<decimal>("ProfitInPips")
                        .HasColumnType("decimal(6,2)")
                        .HasColumnName("profit_in_pips");

                    b.Property<decimal>("ProfitLoss")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("profit_loss");

                    b.Property<List<string>>("ReasonToAvoid")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("reason_to_avoid");

                    b.Property<List<string>>("ReasonToTrade")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("reason_to_trade");

                    b.Property<string>("UsedIndicator")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasColumnName("used_indicator");

                    b.Property<List<string>>("UsedStrategy")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("used_strategy");

                    b.Property<string>("UsedSystem")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasColumnName("used_system");

                    b.Property<bool>("ValidTrade")
                        .HasColumnType("boolean")
                        .HasColumnName("valid_trade");

                    b.Property<long>("Volume")
                        .HasColumnType("bigint")
                        .HasColumnName("volume");

                    b.HasKey("EntryId")
                        .HasName("pk_analysis_for_positions");

                    b.HasIndex("PositionId")
                        .HasDatabaseName("ix_analysis_for_positions_position_id");

                    b.ToTable("analysis_for_positions", (string)null);
                });

            modelBuilder.Entity("SmartFxJournal.JournalDB.model.PositionJournalEntry", b =>
                {
                    b.Property<long>("JournalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("journal_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("JournalId"));

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_complete");

                    b.Property<string>("JournalText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("journal_text");

                    b.Property<DateTime>("LastModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified_on")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.HasKey("JournalId")
                        .HasName("pk_journals_for_positions");

                    b.HasIndex("ParentId")
                        .IsUnique()
                        .HasDatabaseName("ix_journals_for_positions_parent_id");

                    b.ToTable("journals_for_positions", (string)null);
                });

            modelBuilder.Entity("SmartFxJournal.JournalDB.model.TradingAccount", b =>
                {
                    b.Property<long>("AccountNo")
                        .HasColumnType("bigint")
                        .HasColumnName("account_no");

                    b.Property<string>("AccountCurrency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(10)")
                        .HasColumnName("account_currency")
                        .HasDefaultValueSql("'EUR'::character varying");

                    b.Property<string>("Broker")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("broker");

                    b.Property<long>("CTraderAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("c_trader_account_id");

                    b.Property<string>("CTraderId")
                        .HasColumnType("character varying(256)")
                        .HasColumnName("c_trader_id");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("now()");

                    b.Property<decimal>("CurrentBalance")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("current_balance");

                    b.Property<short>("ImportMode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("import_mode")
                        .HasDefaultValueSql("0");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.Property<bool>("IsLive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_live");

                    b.Property<long>("LastImportedOn")
                        .HasColumnType("bigint")
                        .HasColumnName("last_imported_on");

                    b.Property<DateTime>("LastModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified_on")
                        .HasDefaultValueSql("now()");

                    b.Property<DateOnly>("OpenedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("opened_on")
                        .HasDefaultValueSql("now()");

                    b.Property<decimal>("StartBalance")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("start_balance");

                    b.HasKey("AccountNo")
                        .HasName("pk_trading_accounts");

                    b.HasIndex("CTraderId")
                        .HasDatabaseName("ix_trading_accounts_c_trader_id");

                    b.ToTable("trading_accounts", null, t =>
                        {
                            t.HasCheckConstraint("chk_positive", "account_no > 0");
                        });
                });

            modelBuilder.Entity("SmartFxJournal.JournalDB.model.AnalysisJournalEntry", b =>
                {
                    b.HasOne("SmartFxJournal.JournalDB.model.PositionAnalysisEntry", "AnalysisEntry")
                        .WithOne("Notes")
                        .HasForeignKey("SmartFxJournal.JournalDB.model.AnalysisJournalEntry", "ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_analysis_journal");

                    b.Navigation("AnalysisEntry");
                });

            modelBuilder.Entity("SmartFxJournal.JournalDB.model.ClosedPosition", b =>
                {
                    b.HasOne("SmartFxJournal.JournalDB.model.TradingAccount", "TradingAccount")
                        .WithMany("Positions")
                        .HasForeignKey("AccountNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_parent_account");

                    b.Navigation("TradingAccount");
                });

            modelBuilder.Entity("SmartFxJournal.JournalDB.model.ExecutedOrder", b =>
                {
                    b.HasOne("SmartFxJournal.JournalDB.model.TradingAccount", "TradingAccount")
                        .WithMany("ExecutedOrders")
                        .HasForeignKey("AccountNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_parent_account");

                    b.HasOne("SmartFxJournal.JournalDB.model.ClosedPosition", "Position")
                        .WithMany("ExecutedOrders")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_parent_position");

                    b.Navigation("Position");

                    b.Navigation("TradingAccount");
                });

            modelBuilder.Entity("SmartFxJournal.JournalDB.model.PositionAnalysisEntry", b =>
                {
                    b.HasOne("SmartFxJournal.JournalDB.model.ClosedPosition", "Position")
                        .WithMany("AnalysisEntries")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_analyzed_position");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("SmartFxJournal.JournalDB.model.PositionJournalEntry", b =>
                {
                    b.HasOne("SmartFxJournal.JournalDB.model.ClosedPosition", "Position")
                        .WithOne("Notes")
                        .HasForeignKey("SmartFxJournal.JournalDB.model.PositionJournalEntry", "ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_parent_position");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("SmartFxJournal.JournalDB.model.TradingAccount", b =>
                {
                    b.HasOne("SmartFxJournal.JournalDB.model.CTraderAccount", "CTraderAccount")
                        .WithMany("TradingAccounts")
                        .HasForeignKey("CTraderId")
                        .HasConstraintName("FK_ctrader_parent");

                    b.Navigation("CTraderAccount");
                });

            modelBuilder.Entity("SmartFxJournal.JournalDB.model.CTraderAccount", b =>
                {
                    b.Navigation("TradingAccounts");
                });

            modelBuilder.Entity("SmartFxJournal.JournalDB.model.ClosedPosition", b =>
                {
                    b.Navigation("AnalysisEntries");

                    b.Navigation("ExecutedOrders");

                    b.Navigation("Notes");
                });

            modelBuilder.Entity("SmartFxJournal.JournalDB.model.PositionAnalysisEntry", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("SmartFxJournal.JournalDB.model.TradingAccount", b =>
                {
                    b.Navigation("ExecutedOrders");

                    b.Navigation("Positions");
                });
#pragma warning restore 612, 618
        }
    }
}
