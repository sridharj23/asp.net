// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SmartFxJournal.JournalDB.model;

#nullable disable

namespace SmartFxJournal.JournalDB.migrations
{
    [DbContext(typeof(JournalDbContext))]
    partial class JournalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SmartFxJournal.JournalDB.model.Account", b =>
                {
                    b.Property<string>("AccountNo")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("account_no");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("account_type")
                        .HasDefaultValueSql("'Demo'::character varying");

                    b.Property<string>("BrokerName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("broker_name");

                    b.Property<string>("CTraderAccountCTraderId")
                        .HasColumnType("character varying(256)")
                        .HasColumnName("c_trader_account_c_trader_id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("CurrencyType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("currency_type")
                        .HasDefaultValueSql("'EUR'::character varying");

                    b.Property<decimal?>("CurrentBalance")
                        .HasColumnType("numeric")
                        .HasColumnName("current_balance");

                    b.Property<string>("ImportMode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("import_mode")
                        .HasDefaultValueSql("'CSV'::character varying");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.Property<DateTime?>("LastImportedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_imported_on");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.Property<string>("NickName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nick_name");

                    b.Property<DateOnly?>("OpenedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("opened_on")
                        .HasDefaultValueSql("now()");

                    b.Property<decimal>("StartBalance")
                        .HasColumnType("numeric")
                        .HasColumnName("start_balance");

                    b.HasKey("AccountNo")
                        .HasName("pk_accounts");

                    b.HasIndex("CTraderAccountCTraderId")
                        .HasDatabaseName("ix_accounts_c_trader_account_c_trader_id");

                    b.ToTable("accounts", (string)null);
                });

            modelBuilder.Entity("SmartFxJournal.JournalDB.model.CTraderAccount", b =>
                {
                    b.Property<string>("CTraderId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("c_trader_id");

                    b.Property<string>("AuthToken")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("auth_token");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("client_id");

                    b.Property<string>("ClientSecret")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("client_secret");

                    b.Property<DateTime?>("LastFetchedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_fetched_on");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("refresh_token");

                    b.HasKey("CTraderId")
                        .HasName("pk_ctraderaccounts");

                    b.HasIndex("ClientId")
                        .IsUnique()
                        .HasDatabaseName("ix_ctraderaccounts_client_id");

                    b.ToTable("ctraderaccounts", (string)null);
                });

            modelBuilder.Entity("SmartFxJournal.JournalDB.model.Account", b =>
                {
                    b.HasOne("SmartFxJournal.JournalDB.model.CTraderAccount", null)
                        .WithMany("Accounts")
                        .HasForeignKey("CTraderAccountCTraderId")
                        .HasConstraintName("fk_accounts_ctraderaccounts_c_trader_account_c_trader_id");
                });

            modelBuilder.Entity("SmartFxJournal.JournalDB.model.CTraderAccount", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
